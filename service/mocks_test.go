// Code generated by MockGen. DO NOT EDIT.
// Source: service/interfaces.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	csi "github.com/container-storage-interface/spec/lib/go/csi"
	gobrick "github.com/dell/gobrick"
	gofsutil "github.com/dell/gofsutil"
	gomock "github.com/golang/mock/gomock"
	gocsi "github.com/rexray/gocsi"
	io "io"
	net "net"
	os "os"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateVolume mocks base method
func (m *MockService) CreateVolume(arg0 context.Context, arg1 *csi.CreateVolumeRequest) (*csi.CreateVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.CreateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume
func (mr *MockServiceMockRecorder) CreateVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockService)(nil).CreateVolume), arg0, arg1)
}

// DeleteVolume mocks base method
func (m *MockService) DeleteVolume(arg0 context.Context, arg1 *csi.DeleteVolumeRequest) (*csi.DeleteVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.DeleteVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume
func (mr *MockServiceMockRecorder) DeleteVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockService)(nil).DeleteVolume), arg0, arg1)
}

// ControllerPublishVolume mocks base method
func (m *MockService) ControllerPublishVolume(arg0 context.Context, arg1 *csi.ControllerPublishVolumeRequest) (*csi.ControllerPublishVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerPublishVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.ControllerPublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerPublishVolume indicates an expected call of ControllerPublishVolume
func (mr *MockServiceMockRecorder) ControllerPublishVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerPublishVolume", reflect.TypeOf((*MockService)(nil).ControllerPublishVolume), arg0, arg1)
}

// ControllerUnpublishVolume mocks base method
func (m *MockService) ControllerUnpublishVolume(arg0 context.Context, arg1 *csi.ControllerUnpublishVolumeRequest) (*csi.ControllerUnpublishVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerUnpublishVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.ControllerUnpublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerUnpublishVolume indicates an expected call of ControllerUnpublishVolume
func (mr *MockServiceMockRecorder) ControllerUnpublishVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerUnpublishVolume", reflect.TypeOf((*MockService)(nil).ControllerUnpublishVolume), arg0, arg1)
}

// ValidateVolumeCapabilities mocks base method
func (m *MockService) ValidateVolumeCapabilities(arg0 context.Context, arg1 *csi.ValidateVolumeCapabilitiesRequest) (*csi.ValidateVolumeCapabilitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVolumeCapabilities", arg0, arg1)
	ret0, _ := ret[0].(*csi.ValidateVolumeCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateVolumeCapabilities indicates an expected call of ValidateVolumeCapabilities
func (mr *MockServiceMockRecorder) ValidateVolumeCapabilities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVolumeCapabilities", reflect.TypeOf((*MockService)(nil).ValidateVolumeCapabilities), arg0, arg1)
}

// ListVolumes mocks base method
func (m *MockService) ListVolumes(arg0 context.Context, arg1 *csi.ListVolumesRequest) (*csi.ListVolumesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", arg0, arg1)
	ret0, _ := ret[0].(*csi.ListVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes
func (mr *MockServiceMockRecorder) ListVolumes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockService)(nil).ListVolumes), arg0, arg1)
}

// GetCapacity mocks base method
func (m *MockService) GetCapacity(arg0 context.Context, arg1 *csi.GetCapacityRequest) (*csi.GetCapacityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapacity", arg0, arg1)
	ret0, _ := ret[0].(*csi.GetCapacityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapacity indicates an expected call of GetCapacity
func (mr *MockServiceMockRecorder) GetCapacity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapacity", reflect.TypeOf((*MockService)(nil).GetCapacity), arg0, arg1)
}

// ControllerGetCapabilities mocks base method
func (m *MockService) ControllerGetCapabilities(arg0 context.Context, arg1 *csi.ControllerGetCapabilitiesRequest) (*csi.ControllerGetCapabilitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerGetCapabilities", arg0, arg1)
	ret0, _ := ret[0].(*csi.ControllerGetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerGetCapabilities indicates an expected call of ControllerGetCapabilities
func (mr *MockServiceMockRecorder) ControllerGetCapabilities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerGetCapabilities", reflect.TypeOf((*MockService)(nil).ControllerGetCapabilities), arg0, arg1)
}

// CreateSnapshot mocks base method
func (m *MockService) CreateSnapshot(arg0 context.Context, arg1 *csi.CreateSnapshotRequest) (*csi.CreateSnapshotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*csi.CreateSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot
func (mr *MockServiceMockRecorder) CreateSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockService)(nil).CreateSnapshot), arg0, arg1)
}

// DeleteSnapshot mocks base method
func (m *MockService) DeleteSnapshot(arg0 context.Context, arg1 *csi.DeleteSnapshotRequest) (*csi.DeleteSnapshotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*csi.DeleteSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot
func (mr *MockServiceMockRecorder) DeleteSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockService)(nil).DeleteSnapshot), arg0, arg1)
}

// ListSnapshots mocks base method
func (m *MockService) ListSnapshots(arg0 context.Context, arg1 *csi.ListSnapshotsRequest) (*csi.ListSnapshotsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", arg0, arg1)
	ret0, _ := ret[0].(*csi.ListSnapshotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots
func (mr *MockServiceMockRecorder) ListSnapshots(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockService)(nil).ListSnapshots), arg0, arg1)
}

// ControllerExpandVolume mocks base method
func (m *MockService) ControllerExpandVolume(arg0 context.Context, arg1 *csi.ControllerExpandVolumeRequest) (*csi.ControllerExpandVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerExpandVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.ControllerExpandVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerExpandVolume indicates an expected call of ControllerExpandVolume
func (mr *MockServiceMockRecorder) ControllerExpandVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerExpandVolume", reflect.TypeOf((*MockService)(nil).ControllerExpandVolume), arg0, arg1)
}

// GetPluginInfo mocks base method
func (m *MockService) GetPluginInfo(arg0 context.Context, arg1 *csi.GetPluginInfoRequest) (*csi.GetPluginInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginInfo", arg0, arg1)
	ret0, _ := ret[0].(*csi.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockServiceMockRecorder) GetPluginInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockService)(nil).GetPluginInfo), arg0, arg1)
}

// GetPluginCapabilities mocks base method
func (m *MockService) GetPluginCapabilities(arg0 context.Context, arg1 *csi.GetPluginCapabilitiesRequest) (*csi.GetPluginCapabilitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginCapabilities", arg0, arg1)
	ret0, _ := ret[0].(*csi.GetPluginCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginCapabilities indicates an expected call of GetPluginCapabilities
func (mr *MockServiceMockRecorder) GetPluginCapabilities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginCapabilities", reflect.TypeOf((*MockService)(nil).GetPluginCapabilities), arg0, arg1)
}

// Probe mocks base method
func (m *MockService) Probe(arg0 context.Context, arg1 *csi.ProbeRequest) (*csi.ProbeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Probe", arg0, arg1)
	ret0, _ := ret[0].(*csi.ProbeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Probe indicates an expected call of Probe
func (mr *MockServiceMockRecorder) Probe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Probe", reflect.TypeOf((*MockService)(nil).Probe), arg0, arg1)
}

// NodeStageVolume mocks base method
func (m *MockService) NodeStageVolume(arg0 context.Context, arg1 *csi.NodeStageVolumeRequest) (*csi.NodeStageVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeStageVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeStageVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeStageVolume indicates an expected call of NodeStageVolume
func (mr *MockServiceMockRecorder) NodeStageVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeStageVolume", reflect.TypeOf((*MockService)(nil).NodeStageVolume), arg0, arg1)
}

// NodeUnstageVolume mocks base method
func (m *MockService) NodeUnstageVolume(arg0 context.Context, arg1 *csi.NodeUnstageVolumeRequest) (*csi.NodeUnstageVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeUnstageVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeUnstageVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeUnstageVolume indicates an expected call of NodeUnstageVolume
func (mr *MockServiceMockRecorder) NodeUnstageVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUnstageVolume", reflect.TypeOf((*MockService)(nil).NodeUnstageVolume), arg0, arg1)
}

// NodePublishVolume mocks base method
func (m *MockService) NodePublishVolume(arg0 context.Context, arg1 *csi.NodePublishVolumeRequest) (*csi.NodePublishVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodePublishVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodePublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodePublishVolume indicates an expected call of NodePublishVolume
func (mr *MockServiceMockRecorder) NodePublishVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodePublishVolume", reflect.TypeOf((*MockService)(nil).NodePublishVolume), arg0, arg1)
}

// NodeUnpublishVolume mocks base method
func (m *MockService) NodeUnpublishVolume(arg0 context.Context, arg1 *csi.NodeUnpublishVolumeRequest) (*csi.NodeUnpublishVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeUnpublishVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeUnpublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeUnpublishVolume indicates an expected call of NodeUnpublishVolume
func (mr *MockServiceMockRecorder) NodeUnpublishVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUnpublishVolume", reflect.TypeOf((*MockService)(nil).NodeUnpublishVolume), arg0, arg1)
}

// NodeGetVolumeStats mocks base method
func (m *MockService) NodeGetVolumeStats(arg0 context.Context, arg1 *csi.NodeGetVolumeStatsRequest) (*csi.NodeGetVolumeStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeGetVolumeStats", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeGetVolumeStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeGetVolumeStats indicates an expected call of NodeGetVolumeStats
func (mr *MockServiceMockRecorder) NodeGetVolumeStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeGetVolumeStats", reflect.TypeOf((*MockService)(nil).NodeGetVolumeStats), arg0, arg1)
}

// NodeExpandVolume mocks base method
func (m *MockService) NodeExpandVolume(arg0 context.Context, arg1 *csi.NodeExpandVolumeRequest) (*csi.NodeExpandVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeExpandVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeExpandVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeExpandVolume indicates an expected call of NodeExpandVolume
func (mr *MockServiceMockRecorder) NodeExpandVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeExpandVolume", reflect.TypeOf((*MockService)(nil).NodeExpandVolume), arg0, arg1)
}

// NodeGetCapabilities mocks base method
func (m *MockService) NodeGetCapabilities(arg0 context.Context, arg1 *csi.NodeGetCapabilitiesRequest) (*csi.NodeGetCapabilitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeGetCapabilities", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeGetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeGetCapabilities indicates an expected call of NodeGetCapabilities
func (mr *MockServiceMockRecorder) NodeGetCapabilities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeGetCapabilities", reflect.TypeOf((*MockService)(nil).NodeGetCapabilities), arg0, arg1)
}

// NodeGetInfo mocks base method
func (m *MockService) NodeGetInfo(arg0 context.Context, arg1 *csi.NodeGetInfoRequest) (*csi.NodeGetInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeGetInfo", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeGetInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeGetInfo indicates an expected call of NodeGetInfo
func (mr *MockServiceMockRecorder) NodeGetInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeGetInfo", reflect.TypeOf((*MockService)(nil).NodeGetInfo), arg0, arg1)
}

// BeforeServe mocks base method
func (m *MockService) BeforeServe(arg0 context.Context, arg1 *gocsi.StoragePlugin, arg2 net.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeServe", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeServe indicates an expected call of BeforeServe
func (mr *MockServiceMockRecorder) BeforeServe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeServe", reflect.TypeOf((*MockService)(nil).BeforeServe), arg0, arg1, arg2)
}

// ShutDown mocks base method
func (m *MockService) ShutDown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutDown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutDown indicates an expected call of ShutDown
func (mr *MockServiceMockRecorder) ShutDown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutDown", reflect.TypeOf((*MockService)(nil).ShutDown), ctx)
}

// MockinternalServiceAPI is a mock of internalServiceAPI interface
type MockinternalServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockinternalServiceAPIMockRecorder
}

// MockinternalServiceAPIMockRecorder is the mock recorder for MockinternalServiceAPI
type MockinternalServiceAPIMockRecorder struct {
	mock *MockinternalServiceAPI
}

// NewMockinternalServiceAPI creates a new mock instance
func NewMockinternalServiceAPI(ctrl *gomock.Controller) *MockinternalServiceAPI {
	mock := &MockinternalServiceAPI{ctrl: ctrl}
	mock.recorder = &MockinternalServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockinternalServiceAPI) EXPECT() *MockinternalServiceAPIMockRecorder {
	return m.recorder
}

// getISCSITargetsInfoFromStorage mocks base method
func (m *MockinternalServiceAPI) getISCSITargetsInfoFromStorage() ([]ISCSITargetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getISCSITargetsInfoFromStorage")
	ret0, _ := ret[0].([]ISCSITargetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getISCSITargetsInfoFromStorage indicates an expected call of getISCSITargetsInfoFromStorage
func (mr *MockinternalServiceAPIMockRecorder) getISCSITargetsInfoFromStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getISCSITargetsInfoFromStorage", reflect.TypeOf((*MockinternalServiceAPI)(nil).getISCSITargetsInfoFromStorage))
}

// getFCTargetsInfoFromStorage mocks base method
func (m *MockinternalServiceAPI) getFCTargetsInfoFromStorage() ([]FCTargetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getFCTargetsInfoFromStorage")
	ret0, _ := ret[0].([]FCTargetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getFCTargetsInfoFromStorage indicates an expected call of getFCTargetsInfoFromStorage
func (mr *MockinternalServiceAPIMockRecorder) getFCTargetsInfoFromStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFCTargetsInfoFromStorage", reflect.TypeOf((*MockinternalServiceAPI)(nil).getFCTargetsInfoFromStorage))
}

// nodeProbe mocks base method
func (m *MockinternalServiceAPI) nodeProbe(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "nodeProbe", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// nodeProbe indicates an expected call of nodeProbe
func (mr *MockinternalServiceAPIMockRecorder) nodeProbe(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "nodeProbe", reflect.TypeOf((*MockinternalServiceAPI)(nil).nodeProbe), ctx)
}

// initPowerStoreClient mocks base method
func (m *MockinternalServiceAPI) initPowerStoreClient() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initPowerStoreClient")
	ret0, _ := ret[0].(error)
	return ret0
}

// initPowerStoreClient indicates an expected call of initPowerStoreClient
func (mr *MockinternalServiceAPIMockRecorder) initPowerStoreClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initPowerStoreClient", reflect.TypeOf((*MockinternalServiceAPI)(nil).initPowerStoreClient))
}

// initApiThrottle mocks base method
func (m *MockinternalServiceAPI) initApiThrottle() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initApiThrottle")
	ret0, _ := ret[0].(error)
	return ret0
}

// initApiThrottle indicates an expected call of initApiThrottle
func (mr *MockinternalServiceAPIMockRecorder) initApiThrottle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initApiThrottle", reflect.TypeOf((*MockinternalServiceAPI)(nil).initApiThrottle))
}

// initCustomInterceptors mocks base method
func (m *MockinternalServiceAPI) initCustomInterceptors(sp *gocsi.StoragePlugin, opts Opts) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "initCustomInterceptors", sp, opts)
}

// initCustomInterceptors indicates an expected call of initCustomInterceptors
func (mr *MockinternalServiceAPIMockRecorder) initCustomInterceptors(sp, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initCustomInterceptors", reflect.TypeOf((*MockinternalServiceAPI)(nil).initCustomInterceptors), sp, opts)
}

// runDebugHTTPServer mocks base method
func (m *MockinternalServiceAPI) runDebugHTTPServer(ctx context.Context, gs gracefulStopper) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "runDebugHTTPServer", ctx, gs)
}

// runDebugHTTPServer indicates an expected call of runDebugHTTPServer
func (mr *MockinternalServiceAPIMockRecorder) runDebugHTTPServer(ctx, gs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "runDebugHTTPServer", reflect.TypeOf((*MockinternalServiceAPI)(nil).runDebugHTTPServer), ctx, gs)
}

// updateNodeID mocks base method
func (m *MockinternalServiceAPI) updateNodeID() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateNodeID")
	ret0, _ := ret[0].(error)
	return ret0
}

// updateNodeID indicates an expected call of updateNodeID
func (mr *MockinternalServiceAPIMockRecorder) updateNodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateNodeID", reflect.TypeOf((*MockinternalServiceAPI)(nil).updateNodeID))
}

// nodeStartup mocks base method
func (m *MockinternalServiceAPI) nodeStartup(ctx context.Context, gs gracefulStopper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "nodeStartup", ctx, gs)
	ret0, _ := ret[0].(error)
	return ret0
}

// nodeStartup indicates an expected call of nodeStartup
func (mr *MockinternalServiceAPIMockRecorder) nodeStartup(ctx, gs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "nodeStartup", reflect.TypeOf((*MockinternalServiceAPI)(nil).nodeStartup), ctx, gs)
}

// nodeHostSetup mocks base method
func (m *MockinternalServiceAPI) nodeHostSetup(initiators []string, useFC bool, maximumStartupDelay int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "nodeHostSetup", initiators, useFC, maximumStartupDelay)
	ret0, _ := ret[0].(error)
	return ret0
}

// nodeHostSetup indicates an expected call of nodeHostSetup
func (mr *MockinternalServiceAPIMockRecorder) nodeHostSetup(initiators, useFC, maximumStartupDelay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "nodeHostSetup", reflect.TypeOf((*MockinternalServiceAPI)(nil).nodeHostSetup), initiators, useFC, maximumStartupDelay)
}

// createOrUpdateHost mocks base method
func (m *MockinternalServiceAPI) createOrUpdateHost(ctx context.Context, useFC bool, initiators []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createOrUpdateHost", ctx, useFC, initiators)
	ret0, _ := ret[0].(error)
	return ret0
}

// createOrUpdateHost indicates an expected call of createOrUpdateHost
func (mr *MockinternalServiceAPIMockRecorder) createOrUpdateHost(ctx, useFC, initiators interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createOrUpdateHost", reflect.TypeOf((*MockinternalServiceAPI)(nil).createOrUpdateHost), ctx, useFC, initiators)
}

// createHost mocks base method
func (m *MockinternalServiceAPI) createHost(ctx context.Context, useFC bool, initiators []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createHost", ctx, useFC, initiators)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createHost indicates an expected call of createHost
func (mr *MockinternalServiceAPIMockRecorder) createHost(ctx, useFC, initiators interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createHost", reflect.TypeOf((*MockinternalServiceAPI)(nil).createHost), ctx, useFC, initiators)
}

// modifyHostInitiators mocks base method
func (m *MockinternalServiceAPI) modifyHostInitiators(ctx context.Context, hostID string, useFC bool, initiatorsToAdd, initiatorsToDelete []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "modifyHostInitiators", ctx, hostID, useFC, initiatorsToAdd, initiatorsToDelete)
	ret0, _ := ret[0].(error)
	return ret0
}

// modifyHostInitiators indicates an expected call of modifyHostInitiators
func (mr *MockinternalServiceAPIMockRecorder) modifyHostInitiators(ctx, hostID, useFC, initiatorsToAdd, initiatorsToDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "modifyHostInitiators", reflect.TypeOf((*MockinternalServiceAPI)(nil).modifyHostInitiators), ctx, hostID, useFC, initiatorsToAdd, initiatorsToDelete)
}

// detachVolumeFromAllHosts mocks base method
func (m *MockinternalServiceAPI) detachVolumeFromAllHosts(ctx context.Context, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "detachVolumeFromAllHosts", ctx, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// detachVolumeFromAllHosts indicates an expected call of detachVolumeFromAllHosts
func (mr *MockinternalServiceAPIMockRecorder) detachVolumeFromAllHosts(ctx, volumeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "detachVolumeFromAllHosts", reflect.TypeOf((*MockinternalServiceAPI)(nil).detachVolumeFromAllHosts), ctx, volumeID)
}

// detachVolumeFromHost mocks base method
func (m *MockinternalServiceAPI) detachVolumeFromHost(ctx context.Context, hostID, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "detachVolumeFromHost", ctx, hostID, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// detachVolumeFromHost indicates an expected call of detachVolumeFromHost
func (mr *MockinternalServiceAPIMockRecorder) detachVolumeFromHost(ctx, hostID, volumeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "detachVolumeFromHost", reflect.TypeOf((*MockinternalServiceAPI)(nil).detachVolumeFromHost), ctx, hostID, volumeID)
}

// initNodeFSLib mocks base method
func (m *MockinternalServiceAPI) initNodeFSLib() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "initNodeFSLib")
}

// initNodeFSLib indicates an expected call of initNodeFSLib
func (mr *MockinternalServiceAPIMockRecorder) initNodeFSLib() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initNodeFSLib", reflect.TypeOf((*MockinternalServiceAPI)(nil).initNodeFSLib))
}

// initNodeMountLib mocks base method
func (m *MockinternalServiceAPI) initNodeMountLib() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "initNodeMountLib")
}

// initNodeMountLib indicates an expected call of initNodeMountLib
func (mr *MockinternalServiceAPIMockRecorder) initNodeMountLib() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initNodeMountLib", reflect.TypeOf((*MockinternalServiceAPI)(nil).initNodeMountLib))
}

// initISCSIConnector mocks base method
func (m *MockinternalServiceAPI) initISCSIConnector() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "initISCSIConnector")
}

// initISCSIConnector indicates an expected call of initISCSIConnector
func (mr *MockinternalServiceAPIMockRecorder) initISCSIConnector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initISCSIConnector", reflect.TypeOf((*MockinternalServiceAPI)(nil).initISCSIConnector))
}

// initFCConnector mocks base method
func (m *MockinternalServiceAPI) initFCConnector() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "initFCConnector")
}

// initFCConnector indicates an expected call of initFCConnector
func (mr *MockinternalServiceAPIMockRecorder) initFCConnector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initFCConnector", reflect.TypeOf((*MockinternalServiceAPI)(nil).initFCConnector))
}

// initNodeVolToDevMapper mocks base method
func (m *MockinternalServiceAPI) initNodeVolToDevMapper() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "initNodeVolToDevMapper")
}

// initNodeVolToDevMapper indicates an expected call of initNodeVolToDevMapper
func (mr *MockinternalServiceAPIMockRecorder) initNodeVolToDevMapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initNodeVolToDevMapper", reflect.TypeOf((*MockinternalServiceAPI)(nil).initNodeVolToDevMapper))
}

// readPublishContext mocks base method
func (m *MockinternalServiceAPI) readPublishContext(req publishContextGetter) (publishContextData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "readPublishContext", req)
	ret0, _ := ret[0].(publishContextData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// readPublishContext indicates an expected call of readPublishContext
func (mr *MockinternalServiceAPIMockRecorder) readPublishContext(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "readPublishContext", reflect.TypeOf((*MockinternalServiceAPI)(nil).readPublishContext), req)
}

// readISCSITargetsFromPublishContext mocks base method
func (m *MockinternalServiceAPI) readISCSITargetsFromPublishContext(pc map[string]string) []ISCSITargetInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "readISCSITargetsFromPublishContext", pc)
	ret0, _ := ret[0].([]ISCSITargetInfo)
	return ret0
}

// readISCSITargetsFromPublishContext indicates an expected call of readISCSITargetsFromPublishContext
func (mr *MockinternalServiceAPIMockRecorder) readISCSITargetsFromPublishContext(pc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "readISCSITargetsFromPublishContext", reflect.TypeOf((*MockinternalServiceAPI)(nil).readISCSITargetsFromPublishContext), pc)
}

// readFCTargetsFromPublishContext mocks base method
func (m *MockinternalServiceAPI) readFCTargetsFromPublishContext(pc map[string]string) []FCTargetInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "readFCTargetsFromPublishContext", pc)
	ret0, _ := ret[0].([]FCTargetInfo)
	return ret0
}

// readFCTargetsFromPublishContext indicates an expected call of readFCTargetsFromPublishContext
func (mr *MockinternalServiceAPIMockRecorder) readFCTargetsFromPublishContext(pc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "readFCTargetsFromPublishContext", reflect.TypeOf((*MockinternalServiceAPI)(nil).readFCTargetsFromPublishContext), pc)
}

// getNodeFCPorts mocks base method
func (m *MockinternalServiceAPI) getNodeFCPorts(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getNodeFCPorts", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getNodeFCPorts indicates an expected call of getNodeFCPorts
func (mr *MockinternalServiceAPIMockRecorder) getNodeFCPorts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNodeFCPorts", reflect.TypeOf((*MockinternalServiceAPI)(nil).getNodeFCPorts), ctx)
}

// readFCPortsFilterFile mocks base method
func (m *MockinternalServiceAPI) readFCPortsFilterFile(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "readFCPortsFilterFile", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// readFCPortsFilterFile indicates an expected call of readFCPortsFilterFile
func (mr *MockinternalServiceAPIMockRecorder) readFCPortsFilterFile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "readFCPortsFilterFile", reflect.TypeOf((*MockinternalServiceAPI)(nil).readFCPortsFilterFile), ctx)
}

// connectDevice mocks base method
func (m *MockinternalServiceAPI) connectDevice(ctx context.Context, data publishContextData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "connectDevice", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// connectDevice indicates an expected call of connectDevice
func (mr *MockinternalServiceAPIMockRecorder) connectDevice(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "connectDevice", reflect.TypeOf((*MockinternalServiceAPI)(nil).connectDevice), ctx, data)
}

// connectISCSIDevice mocks base method
func (m *MockinternalServiceAPI) connectISCSIDevice(ctx context.Context, lun int, data publishContextData) (gobrick.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "connectISCSIDevice", ctx, lun, data)
	ret0, _ := ret[0].(gobrick.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// connectISCSIDevice indicates an expected call of connectISCSIDevice
func (mr *MockinternalServiceAPIMockRecorder) connectISCSIDevice(ctx, lun, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "connectISCSIDevice", reflect.TypeOf((*MockinternalServiceAPI)(nil).connectISCSIDevice), ctx, lun, data)
}

// connectFCDevice mocks base method
func (m *MockinternalServiceAPI) connectFCDevice(ctx context.Context, lun int, data publishContextData) (gobrick.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "connectFCDevice", ctx, lun, data)
	ret0, _ := ret[0].(gobrick.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// connectFCDevice indicates an expected call of connectFCDevice
func (mr *MockinternalServiceAPIMockRecorder) connectFCDevice(ctx, lun, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "connectFCDevice", reflect.TypeOf((*MockinternalServiceAPI)(nil).connectFCDevice), ctx, lun, data)
}

// MockwrapperFsLib is a mock of wrapperFsLib interface
type MockwrapperFsLib struct {
	ctrl     *gomock.Controller
	recorder *MockwrapperFsLibMockRecorder
}

// MockwrapperFsLibMockRecorder is the mock recorder for MockwrapperFsLib
type MockwrapperFsLibMockRecorder struct {
	mock *MockwrapperFsLib
}

// NewMockwrapperFsLib creates a new mock instance
func NewMockwrapperFsLib(ctrl *gomock.Controller) *MockwrapperFsLib {
	mock := &MockwrapperFsLib{ctrl: ctrl}
	mock.recorder = &MockwrapperFsLibMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwrapperFsLib) EXPECT() *MockwrapperFsLibMockRecorder {
	return m.recorder
}

// GetDiskFormat mocks base method
func (m *MockwrapperFsLib) GetDiskFormat(ctx context.Context, disk string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskFormat", ctx, disk)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskFormat indicates an expected call of GetDiskFormat
func (mr *MockwrapperFsLibMockRecorder) GetDiskFormat(ctx, disk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskFormat", reflect.TypeOf((*MockwrapperFsLib)(nil).GetDiskFormat), ctx, disk)
}

// Format mocks base method
func (m *MockwrapperFsLib) Format(ctx context.Context, source, target, fsType string, options ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, source, target, fsType}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Format", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Format indicates an expected call of Format
func (mr *MockwrapperFsLibMockRecorder) Format(ctx, source, target, fsType interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, source, target, fsType}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockwrapperFsLib)(nil).Format), varargs...)
}

// Mount mocks base method
func (m *MockwrapperFsLib) Mount(ctx context.Context, source, target, fsType string, options ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, source, target, fsType}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Mount", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount
func (mr *MockwrapperFsLibMockRecorder) Mount(ctx, source, target, fsType interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, source, target, fsType}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockwrapperFsLib)(nil).Mount), varargs...)
}

// BindMount mocks base method
func (m *MockwrapperFsLib) BindMount(ctx context.Context, source, target string, options ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, source, target}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BindMount", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindMount indicates an expected call of BindMount
func (mr *MockwrapperFsLibMockRecorder) BindMount(ctx, source, target interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, source, target}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindMount", reflect.TypeOf((*MockwrapperFsLib)(nil).BindMount), varargs...)
}

// Unmount mocks base method
func (m *MockwrapperFsLib) Unmount(ctx context.Context, target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", ctx, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount
func (mr *MockwrapperFsLibMockRecorder) Unmount(ctx, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockwrapperFsLib)(nil).Unmount), ctx, target)
}

// WWNToDevicePath mocks base method
func (m *MockwrapperFsLib) WWNToDevicePath(ctx context.Context, wwn string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WWNToDevicePath", ctx, wwn)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WWNToDevicePath indicates an expected call of WWNToDevicePath
func (mr *MockwrapperFsLibMockRecorder) WWNToDevicePath(ctx, wwn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WWNToDevicePath", reflect.TypeOf((*MockwrapperFsLib)(nil).WWNToDevicePath), ctx, wwn)
}

// RemoveBlockDevice mocks base method
func (m *MockwrapperFsLib) RemoveBlockDevice(ctx context.Context, blockDevicePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBlockDevice", ctx, blockDevicePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBlockDevice indicates an expected call of RemoveBlockDevice
func (mr *MockwrapperFsLibMockRecorder) RemoveBlockDevice(ctx, blockDevicePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBlockDevice", reflect.TypeOf((*MockwrapperFsLib)(nil).RemoveBlockDevice), ctx, blockDevicePath)
}

// ParseProcMounts mocks base method
func (m *MockwrapperFsLib) ParseProcMounts(ctx context.Context, content io.Reader) ([]gofsutil.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseProcMounts", ctx, content)
	ret0, _ := ret[0].([]gofsutil.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseProcMounts indicates an expected call of ParseProcMounts
func (mr *MockwrapperFsLibMockRecorder) ParseProcMounts(ctx, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseProcMounts", reflect.TypeOf((*MockwrapperFsLib)(nil).ParseProcMounts), ctx, content)
}

// MockiSCSIConnector is a mock of iSCSIConnector interface
type MockiSCSIConnector struct {
	ctrl     *gomock.Controller
	recorder *MockiSCSIConnectorMockRecorder
}

// MockiSCSIConnectorMockRecorder is the mock recorder for MockiSCSIConnector
type MockiSCSIConnectorMockRecorder struct {
	mock *MockiSCSIConnector
}

// NewMockiSCSIConnector creates a new mock instance
func NewMockiSCSIConnector(ctrl *gomock.Controller) *MockiSCSIConnector {
	mock := &MockiSCSIConnector{ctrl: ctrl}
	mock.recorder = &MockiSCSIConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockiSCSIConnector) EXPECT() *MockiSCSIConnectorMockRecorder {
	return m.recorder
}

// ConnectVolume mocks base method
func (m *MockiSCSIConnector) ConnectVolume(ctx context.Context, info gobrick.ISCSIVolumeInfo) (gobrick.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectVolume", ctx, info)
	ret0, _ := ret[0].(gobrick.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectVolume indicates an expected call of ConnectVolume
func (mr *MockiSCSIConnectorMockRecorder) ConnectVolume(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectVolume", reflect.TypeOf((*MockiSCSIConnector)(nil).ConnectVolume), ctx, info)
}

// DisconnectVolumeByDeviceName mocks base method
func (m *MockiSCSIConnector) DisconnectVolumeByDeviceName(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectVolumeByDeviceName", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisconnectVolumeByDeviceName indicates an expected call of DisconnectVolumeByDeviceName
func (mr *MockiSCSIConnectorMockRecorder) DisconnectVolumeByDeviceName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectVolumeByDeviceName", reflect.TypeOf((*MockiSCSIConnector)(nil).DisconnectVolumeByDeviceName), ctx, name)
}

// GetInitiatorName mocks base method
func (m *MockiSCSIConnector) GetInitiatorName(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitiatorName", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitiatorName indicates an expected call of GetInitiatorName
func (mr *MockiSCSIConnectorMockRecorder) GetInitiatorName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitiatorName", reflect.TypeOf((*MockiSCSIConnector)(nil).GetInitiatorName), ctx)
}

// MockfcConnector is a mock of fcConnector interface
type MockfcConnector struct {
	ctrl     *gomock.Controller
	recorder *MockfcConnectorMockRecorder
}

// MockfcConnectorMockRecorder is the mock recorder for MockfcConnector
type MockfcConnectorMockRecorder struct {
	mock *MockfcConnector
}

// NewMockfcConnector creates a new mock instance
func NewMockfcConnector(ctrl *gomock.Controller) *MockfcConnector {
	mock := &MockfcConnector{ctrl: ctrl}
	mock.recorder = &MockfcConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockfcConnector) EXPECT() *MockfcConnectorMockRecorder {
	return m.recorder
}

// ConnectVolume mocks base method
func (m *MockfcConnector) ConnectVolume(ctx context.Context, info gobrick.FCVolumeInfo) (gobrick.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectVolume", ctx, info)
	ret0, _ := ret[0].(gobrick.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectVolume indicates an expected call of ConnectVolume
func (mr *MockfcConnectorMockRecorder) ConnectVolume(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectVolume", reflect.TypeOf((*MockfcConnector)(nil).ConnectVolume), ctx, info)
}

// DisconnectVolumeByDeviceName mocks base method
func (m *MockfcConnector) DisconnectVolumeByDeviceName(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectVolumeByDeviceName", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisconnectVolumeByDeviceName indicates an expected call of DisconnectVolumeByDeviceName
func (mr *MockfcConnectorMockRecorder) DisconnectVolumeByDeviceName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectVolumeByDeviceName", reflect.TypeOf((*MockfcConnector)(nil).DisconnectVolumeByDeviceName), ctx, name)
}

// GetInitiatorPorts mocks base method
func (m *MockfcConnector) GetInitiatorPorts(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitiatorPorts", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitiatorPorts indicates an expected call of GetInitiatorPorts
func (mr *MockfcConnectorMockRecorder) GetInitiatorPorts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitiatorPorts", reflect.TypeOf((*MockfcConnector)(nil).GetInitiatorPorts), ctx)
}

// MockmountLib is a mock of mountLib interface
type MockmountLib struct {
	ctrl     *gomock.Controller
	recorder *MockmountLibMockRecorder
}

// MockmountLibMockRecorder is the mock recorder for MockmountLib
type MockmountLibMockRecorder struct {
	mock *MockmountLib
}

// NewMockmountLib creates a new mock instance
func NewMockmountLib(ctrl *gomock.Controller) *MockmountLib {
	mock := &MockmountLib{ctrl: ctrl}
	mock.recorder = &MockmountLibMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmountLib) EXPECT() *MockmountLibMockRecorder {
	return m.recorder
}

// StageVolume mocks base method
func (m *MockmountLib) StageVolume(ctx context.Context, req *csi.NodeStageVolumeRequest, device string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StageVolume", ctx, req, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// StageVolume indicates an expected call of StageVolume
func (mr *MockmountLibMockRecorder) StageVolume(ctx, req, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageVolume", reflect.TypeOf((*MockmountLib)(nil).StageVolume), ctx, req, device)
}

// UnstageVolume mocks base method
func (m *MockmountLib) UnstageVolume(ctx context.Context, req *csi.NodeUnstageVolumeRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnstageVolume", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnstageVolume indicates an expected call of UnstageVolume
func (mr *MockmountLibMockRecorder) UnstageVolume(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnstageVolume", reflect.TypeOf((*MockmountLib)(nil).UnstageVolume), ctx, req)
}

// PublishVolume mocks base method
func (m *MockmountLib) PublishVolume(ctx context.Context, req *csi.NodePublishVolumeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishVolume", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishVolume indicates an expected call of PublishVolume
func (mr *MockmountLibMockRecorder) PublishVolume(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVolume", reflect.TypeOf((*MockmountLib)(nil).PublishVolume), ctx, req)
}

// UnpublishVolume mocks base method
func (m *MockmountLib) UnpublishVolume(ctx context.Context, req *csi.NodeUnpublishVolumeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpublishVolume", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpublishVolume indicates an expected call of UnpublishVolume
func (mr *MockmountLibMockRecorder) UnpublishVolume(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpublishVolume", reflect.TypeOf((*MockmountLib)(nil).UnpublishVolume), ctx, req)
}

// GetMountsByDev mocks base method
func (m *MockmountLib) GetMountsByDev(ctx context.Context, device string) ([]gofsutil.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMountsByDev", ctx, device)
	ret0, _ := ret[0].([]gofsutil.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMountsByDev indicates an expected call of GetMountsByDev
func (mr *MockmountLibMockRecorder) GetMountsByDev(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMountsByDev", reflect.TypeOf((*MockmountLib)(nil).GetMountsByDev), ctx, device)
}

// GetStagingPath mocks base method
func (m *MockmountLib) GetStagingPath(ctx context.Context, req commonReqGetters) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStagingPath", ctx, req)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStagingPath indicates an expected call of GetStagingPath
func (mr *MockmountLibMockRecorder) GetStagingPath(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStagingPath", reflect.TypeOf((*MockmountLib)(nil).GetStagingPath), ctx, req)
}

// IsReadyToPublish mocks base method
func (m *MockmountLib) IsReadyToPublish(ctx context.Context, stagingPath string) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReadyToPublish", ctx, stagingPath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsReadyToPublish indicates an expected call of IsReadyToPublish
func (mr *MockmountLibMockRecorder) IsReadyToPublish(ctx, stagingPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReadyToPublish", reflect.TypeOf((*MockmountLib)(nil).IsReadyToPublish), ctx, stagingPath)
}

// MockmountLibStageCheck is a mock of mountLibStageCheck interface
type MockmountLibStageCheck struct {
	ctrl     *gomock.Controller
	recorder *MockmountLibStageCheckMockRecorder
}

// MockmountLibStageCheckMockRecorder is the mock recorder for MockmountLibStageCheck
type MockmountLibStageCheckMockRecorder struct {
	mock *MockmountLibStageCheck
}

// NewMockmountLibStageCheck creates a new mock instance
func NewMockmountLibStageCheck(ctrl *gomock.Controller) *MockmountLibStageCheck {
	mock := &MockmountLibStageCheck{ctrl: ctrl}
	mock.recorder = &MockmountLibStageCheckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmountLibStageCheck) EXPECT() *MockmountLibStageCheckMockRecorder {
	return m.recorder
}

// getStagedDev mocks base method
func (m *MockmountLibStageCheck) getStagedDev(ctx context.Context, stagePath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getStagedDev", ctx, stagePath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getStagedDev indicates an expected call of getStagedDev
func (mr *MockmountLibStageCheckMockRecorder) getStagedDev(ctx, stagePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getStagedDev", reflect.TypeOf((*MockmountLibStageCheck)(nil).getStagedDev), ctx, stagePath)
}

// MockmountLibPublishCheck is a mock of mountLibPublishCheck interface
type MockmountLibPublishCheck struct {
	ctrl     *gomock.Controller
	recorder *MockmountLibPublishCheckMockRecorder
}

// MockmountLibPublishCheckMockRecorder is the mock recorder for MockmountLibPublishCheck
type MockmountLibPublishCheckMockRecorder struct {
	mock *MockmountLibPublishCheck
}

// NewMockmountLibPublishCheck creates a new mock instance
func NewMockmountLibPublishCheck(ctrl *gomock.Controller) *MockmountLibPublishCheck {
	mock := &MockmountLibPublishCheck{ctrl: ctrl}
	mock.recorder = &MockmountLibPublishCheckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmountLibPublishCheck) EXPECT() *MockmountLibPublishCheckMockRecorder {
	return m.recorder
}

// isAlreadyPublished mocks base method
func (m *MockmountLibPublishCheck) isAlreadyPublished(ctx context.Context, targetPath, rwMode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isAlreadyPublished", ctx, targetPath, rwMode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// isAlreadyPublished indicates an expected call of isAlreadyPublished
func (mr *MockmountLibPublishCheckMockRecorder) isAlreadyPublished(ctx, targetPath, rwMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isAlreadyPublished", reflect.TypeOf((*MockmountLibPublishCheck)(nil).isAlreadyPublished), ctx, targetPath, rwMode)
}

// isReadyToPublish mocks base method
func (m *MockmountLibPublishCheck) isReadyToPublish(ctx context.Context, device string) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isReadyToPublish", ctx, device)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// isReadyToPublish indicates an expected call of isReadyToPublish
func (mr *MockmountLibPublishCheckMockRecorder) isReadyToPublish(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isReadyToPublish", reflect.TypeOf((*MockmountLibPublishCheck)(nil).isReadyToPublish), ctx, device)
}

// MockmountLibMountsReader is a mock of mountLibMountsReader interface
type MockmountLibMountsReader struct {
	ctrl     *gomock.Controller
	recorder *MockmountLibMountsReaderMockRecorder
}

// MockmountLibMountsReaderMockRecorder is the mock recorder for MockmountLibMountsReader
type MockmountLibMountsReaderMockRecorder struct {
	mock *MockmountLibMountsReader
}

// NewMockmountLibMountsReader creates a new mock instance
func NewMockmountLibMountsReader(ctrl *gomock.Controller) *MockmountLibMountsReader {
	mock := &MockmountLibMountsReader{ctrl: ctrl}
	mock.recorder = &MockmountLibMountsReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmountLibMountsReader) EXPECT() *MockmountLibMountsReaderMockRecorder {
	return m.recorder
}

// getMountsByDev mocks base method
func (m *MockmountLibMountsReader) getMountsByDev(ctx context.Context, device string) ([]gofsutil.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getMountsByDev", ctx, device)
	ret0, _ := ret[0].([]gofsutil.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getMountsByDev indicates an expected call of getMountsByDev
func (mr *MockmountLibMountsReaderMockRecorder) getMountsByDev(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getMountsByDev", reflect.TypeOf((*MockmountLibMountsReader)(nil).getMountsByDev), ctx, device)
}

// getTargetMount mocks base method
func (m *MockmountLibMountsReader) getTargetMount(ctx context.Context, target string) (gofsutil.Info, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTargetMount", ctx, target)
	ret0, _ := ret[0].(gofsutil.Info)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// getTargetMount indicates an expected call of getTargetMount
func (mr *MockmountLibMountsReaderMockRecorder) getTargetMount(ctx, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTargetMount", reflect.TypeOf((*MockmountLibMountsReader)(nil).getTargetMount), ctx, target)
}

// getMounts mocks base method
func (m *MockmountLibMountsReader) getMounts(ctx context.Context) ([]gofsutil.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getMounts", ctx)
	ret0, _ := ret[0].([]gofsutil.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getMounts indicates an expected call of getMounts
func (mr *MockmountLibMountsReaderMockRecorder) getMounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getMounts", reflect.TypeOf((*MockmountLibMountsReader)(nil).getMounts), ctx)
}

// MockmountLibPublishBlock is a mock of mountLibPublishBlock interface
type MockmountLibPublishBlock struct {
	ctrl     *gomock.Controller
	recorder *MockmountLibPublishBlockMockRecorder
}

// MockmountLibPublishBlockMockRecorder is the mock recorder for MockmountLibPublishBlock
type MockmountLibPublishBlockMockRecorder struct {
	mock *MockmountLibPublishBlock
}

// NewMockmountLibPublishBlock creates a new mock instance
func NewMockmountLibPublishBlock(ctrl *gomock.Controller) *MockmountLibPublishBlock {
	mock := &MockmountLibPublishBlock{ctrl: ctrl}
	mock.recorder = &MockmountLibPublishBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmountLibPublishBlock) EXPECT() *MockmountLibPublishBlockMockRecorder {
	return m.recorder
}

// publishBlock mocks base method
func (m *MockmountLibPublishBlock) publishBlock(ctx context.Context, req *csi.NodePublishVolumeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "publishBlock", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// publishBlock indicates an expected call of publishBlock
func (mr *MockmountLibPublishBlockMockRecorder) publishBlock(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "publishBlock", reflect.TypeOf((*MockmountLibPublishBlock)(nil).publishBlock), ctx, req)
}

// MockmountLibPublishMount is a mock of mountLibPublishMount interface
type MockmountLibPublishMount struct {
	ctrl     *gomock.Controller
	recorder *MockmountLibPublishMountMockRecorder
}

// MockmountLibPublishMountMockRecorder is the mock recorder for MockmountLibPublishMount
type MockmountLibPublishMountMockRecorder struct {
	mock *MockmountLibPublishMount
}

// NewMockmountLibPublishMount creates a new mock instance
func NewMockmountLibPublishMount(ctrl *gomock.Controller) *MockmountLibPublishMount {
	mock := &MockmountLibPublishMount{ctrl: ctrl}
	mock.recorder = &MockmountLibPublishMountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmountLibPublishMount) EXPECT() *MockmountLibPublishMountMockRecorder {
	return m.recorder
}

// publishMount mocks base method
func (m *MockmountLibPublishMount) publishMount(ctx context.Context, req *csi.NodePublishVolumeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "publishMount", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// publishMount indicates an expected call of publishMount
func (mr *MockmountLibPublishMountMockRecorder) publishMount(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "publishMount", reflect.TypeOf((*MockmountLibPublishMount)(nil).publishMount), ctx, req)
}

// MockreqHelpers is a mock of reqHelpers interface
type MockreqHelpers struct {
	ctrl     *gomock.Controller
	recorder *MockreqHelpersMockRecorder
}

// MockreqHelpersMockRecorder is the mock recorder for MockreqHelpers
type MockreqHelpersMockRecorder struct {
	mock *MockreqHelpers
}

// NewMockreqHelpers creates a new mock instance
func NewMockreqHelpers(ctrl *gomock.Controller) *MockreqHelpers {
	mock := &MockreqHelpers{ctrl: ctrl}
	mock.recorder = &MockreqHelpersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockreqHelpers) EXPECT() *MockreqHelpersMockRecorder {
	return m.recorder
}

// isBlock mocks base method
func (m *MockreqHelpers) isBlock(req volumeCapabilityGetter) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isBlock", req)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isBlock indicates an expected call of isBlock
func (mr *MockreqHelpersMockRecorder) isBlock(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isBlock", reflect.TypeOf((*MockreqHelpers)(nil).isBlock), req)
}

// getStagingPath mocks base method
func (m *MockreqHelpers) getStagingPath(ctx context.Context, req commonReqGetters) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getStagingPath", ctx, req)
	ret0, _ := ret[0].(string)
	return ret0
}

// getStagingPath indicates an expected call of getStagingPath
func (mr *MockreqHelpersMockRecorder) getStagingPath(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getStagingPath", reflect.TypeOf((*MockreqHelpers)(nil).getStagingPath), ctx, req)
}

// MockfileReader is a mock of fileReader interface
type MockfileReader struct {
	ctrl     *gomock.Controller
	recorder *MockfileReaderMockRecorder
}

// MockfileReaderMockRecorder is the mock recorder for MockfileReader
type MockfileReaderMockRecorder struct {
	mock *MockfileReader
}

// NewMockfileReader creates a new mock instance
func NewMockfileReader(ctrl *gomock.Controller) *MockfileReader {
	mock := &MockfileReader{ctrl: ctrl}
	mock.recorder = &MockfileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockfileReader) EXPECT() *MockfileReaderMockRecorder {
	return m.recorder
}

// ReadFile mocks base method
func (m *MockfileReader) ReadFile(filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile
func (mr *MockfileReaderMockRecorder) ReadFile(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockfileReader)(nil).ReadFile), filename)
}

// MockfileWriter is a mock of fileWriter interface
type MockfileWriter struct {
	ctrl     *gomock.Controller
	recorder *MockfileWriterMockRecorder
}

// MockfileWriterMockRecorder is the mock recorder for MockfileWriter
type MockfileWriterMockRecorder struct {
	mock *MockfileWriter
}

// NewMockfileWriter creates a new mock instance
func NewMockfileWriter(ctrl *gomock.Controller) *MockfileWriter {
	mock := &MockfileWriter{ctrl: ctrl}
	mock.recorder = &MockfileWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockfileWriter) EXPECT() *MockfileWriterMockRecorder {
	return m.recorder
}

// WriteFile mocks base method
func (m *MockfileWriter) WriteFile(filename string, data []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockfileWriterMockRecorder) WriteFile(filename, data, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockfileWriter)(nil).WriteFile), filename, data, perm)
}

// MockfilePath is a mock of filePath interface
type MockfilePath struct {
	ctrl     *gomock.Controller
	recorder *MockfilePathMockRecorder
}

// MockfilePathMockRecorder is the mock recorder for MockfilePath
type MockfilePathMockRecorder struct {
	mock *MockfilePath
}

// NewMockfilePath creates a new mock instance
func NewMockfilePath(ctrl *gomock.Controller) *MockfilePath {
	mock := &MockfilePath{ctrl: ctrl}
	mock.recorder = &MockfilePathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockfilePath) EXPECT() *MockfilePathMockRecorder {
	return m.recorder
}

// Glob mocks base method
func (m *MockfilePath) Glob(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Glob", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Glob indicates an expected call of Glob
func (mr *MockfilePathMockRecorder) Glob(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Glob", reflect.TypeOf((*MockfilePath)(nil).Glob), pattern)
}

// MocklimitedOSIFace is a mock of limitedOSIFace interface
type MocklimitedOSIFace struct {
	ctrl     *gomock.Controller
	recorder *MocklimitedOSIFaceMockRecorder
}

// MocklimitedOSIFaceMockRecorder is the mock recorder for MocklimitedOSIFace
type MocklimitedOSIFaceMockRecorder struct {
	mock *MocklimitedOSIFace
}

// NewMocklimitedOSIFace creates a new mock instance
func NewMocklimitedOSIFace(ctrl *gomock.Controller) *MocklimitedOSIFace {
	mock := &MocklimitedOSIFace{ctrl: ctrl}
	mock.recorder = &MocklimitedOSIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocklimitedOSIFace) EXPECT() *MocklimitedOSIFaceMockRecorder {
	return m.recorder
}

// OpenFile mocks base method
func (m *MocklimitedOSIFace) OpenFile(name string, flag int, perm os.FileMode) (limitedFileIFace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", name, flag, perm)
	ret0, _ := ret[0].(limitedFileIFace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile
func (mr *MocklimitedOSIFaceMockRecorder) OpenFile(name, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MocklimitedOSIFace)(nil).OpenFile), name, flag, perm)
}

// Stat mocks base method
func (m *MocklimitedOSIFace) Stat(name string) (limitedFileInfoIFace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(limitedFileInfoIFace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (mr *MocklimitedOSIFaceMockRecorder) Stat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MocklimitedOSIFace)(nil).Stat), name)
}

// IsNotExist mocks base method
func (m *MocklimitedOSIFace) IsNotExist(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotExist", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotExist indicates an expected call of IsNotExist
func (mr *MocklimitedOSIFaceMockRecorder) IsNotExist(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotExist", reflect.TypeOf((*MocklimitedOSIFace)(nil).IsNotExist), err)
}

// Mkdir mocks base method
func (m *MocklimitedOSIFace) Mkdir(name string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", name, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir
func (mr *MocklimitedOSIFaceMockRecorder) Mkdir(name, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MocklimitedOSIFace)(nil).Mkdir), name, perm)
}

// Remove mocks base method
func (m *MocklimitedOSIFace) Remove(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MocklimitedOSIFaceMockRecorder) Remove(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MocklimitedOSIFace)(nil).Remove), name)
}

// ExecCommand mocks base method
func (m *MocklimitedOSIFace) ExecCommand(name string, args ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecCommand", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCommand indicates an expected call of ExecCommand
func (mr *MocklimitedOSIFaceMockRecorder) ExecCommand(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCommand", reflect.TypeOf((*MocklimitedOSIFace)(nil).ExecCommand), varargs...)
}

// MocklimitedFileInfoIFace is a mock of limitedFileInfoIFace interface
type MocklimitedFileInfoIFace struct {
	ctrl     *gomock.Controller
	recorder *MocklimitedFileInfoIFaceMockRecorder
}

// MocklimitedFileInfoIFaceMockRecorder is the mock recorder for MocklimitedFileInfoIFace
type MocklimitedFileInfoIFaceMockRecorder struct {
	mock *MocklimitedFileInfoIFace
}

// NewMocklimitedFileInfoIFace creates a new mock instance
func NewMocklimitedFileInfoIFace(ctrl *gomock.Controller) *MocklimitedFileInfoIFace {
	mock := &MocklimitedFileInfoIFace{ctrl: ctrl}
	mock.recorder = &MocklimitedFileInfoIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocklimitedFileInfoIFace) EXPECT() *MocklimitedFileInfoIFaceMockRecorder {
	return m.recorder
}

// IsDir mocks base method
func (m *MocklimitedFileInfoIFace) IsDir() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDir indicates an expected call of IsDir
func (mr *MocklimitedFileInfoIFaceMockRecorder) IsDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MocklimitedFileInfoIFace)(nil).IsDir))
}

// MocklimitedFileIFace is a mock of limitedFileIFace interface
type MocklimitedFileIFace struct {
	ctrl     *gomock.Controller
	recorder *MocklimitedFileIFaceMockRecorder
}

// MocklimitedFileIFaceMockRecorder is the mock recorder for MocklimitedFileIFace
type MocklimitedFileIFaceMockRecorder struct {
	mock *MocklimitedFileIFace
}

// NewMocklimitedFileIFace creates a new mock instance
func NewMocklimitedFileIFace(ctrl *gomock.Controller) *MocklimitedFileIFace {
	mock := &MocklimitedFileIFace{ctrl: ctrl}
	mock.recorder = &MocklimitedFileIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocklimitedFileIFace) EXPECT() *MocklimitedFileIFaceMockRecorder {
	return m.recorder
}

// WriteString mocks base method
func (m *MocklimitedFileIFace) WriteString(s string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteString", s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteString indicates an expected call of WriteString
func (mr *MocklimitedFileIFaceMockRecorder) WriteString(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteString", reflect.TypeOf((*MocklimitedFileIFace)(nil).WriteString), s)
}

// Close mocks base method
func (m *MocklimitedFileIFace) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MocklimitedFileIFaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MocklimitedFileIFace)(nil).Close))
}

// MockgracefulStopper is a mock of gracefulStopper interface
type MockgracefulStopper struct {
	ctrl     *gomock.Controller
	recorder *MockgracefulStopperMockRecorder
}

// MockgracefulStopperMockRecorder is the mock recorder for MockgracefulStopper
type MockgracefulStopperMockRecorder struct {
	mock *MockgracefulStopper
}

// NewMockgracefulStopper creates a new mock instance
func NewMockgracefulStopper(ctrl *gomock.Controller) *MockgracefulStopper {
	mock := &MockgracefulStopper{ctrl: ctrl}
	mock.recorder = &MockgracefulStopperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockgracefulStopper) EXPECT() *MockgracefulStopperMockRecorder {
	return m.recorder
}

// GracefulStop mocks base method
func (m *MockgracefulStopper) GracefulStop(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GracefulStop", ctx)
}

// GracefulStop indicates an expected call of GracefulStop
func (mr *MockgracefulStopperMockRecorder) GracefulStop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulStop", reflect.TypeOf((*MockgracefulStopper)(nil).GracefulStop), ctx)
}

// MockfileCreator is a mock of fileCreator interface
type MockfileCreator struct {
	ctrl     *gomock.Controller
	recorder *MockfileCreatorMockRecorder
}

// MockfileCreatorMockRecorder is the mock recorder for MockfileCreator
type MockfileCreatorMockRecorder struct {
	mock *MockfileCreator
}

// NewMockfileCreator creates a new mock instance
func NewMockfileCreator(ctrl *gomock.Controller) *MockfileCreator {
	mock := &MockfileCreator{ctrl: ctrl}
	mock.recorder = &MockfileCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockfileCreator) EXPECT() *MockfileCreatorMockRecorder {
	return m.recorder
}

// mkFile mocks base method
func (m *MockfileCreator) mkFile(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "mkFile", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// mkFile indicates an expected call of mkFile
func (mr *MockfileCreatorMockRecorder) mkFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mkFile", reflect.TypeOf((*MockfileCreator)(nil).mkFile), path)
}

// MockdirCreator is a mock of dirCreator interface
type MockdirCreator struct {
	ctrl     *gomock.Controller
	recorder *MockdirCreatorMockRecorder
}

// MockdirCreatorMockRecorder is the mock recorder for MockdirCreator
type MockdirCreatorMockRecorder struct {
	mock *MockdirCreator
}

// NewMockdirCreator creates a new mock instance
func NewMockdirCreator(ctrl *gomock.Controller) *MockdirCreator {
	mock := &MockdirCreator{ctrl: ctrl}
	mock.recorder = &MockdirCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdirCreator) EXPECT() *MockdirCreatorMockRecorder {
	return m.recorder
}

// mkDir mocks base method
func (m *MockdirCreator) mkDir(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "mkDir", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// mkDir indicates an expected call of mkDir
func (mr *MockdirCreatorMockRecorder) mkDir(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mkDir", reflect.TypeOf((*MockdirCreator)(nil).mkDir), path)
}

// MockconsistentReader is a mock of consistentReader interface
type MockconsistentReader struct {
	ctrl     *gomock.Controller
	recorder *MockconsistentReaderMockRecorder
}

// MockconsistentReaderMockRecorder is the mock recorder for MockconsistentReader
type MockconsistentReaderMockRecorder struct {
	mock *MockconsistentReader
}

// NewMockconsistentReader creates a new mock instance
func NewMockconsistentReader(ctrl *gomock.Controller) *MockconsistentReader {
	mock := &MockconsistentReader{ctrl: ctrl}
	mock.recorder = &MockconsistentReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockconsistentReader) EXPECT() *MockconsistentReaderMockRecorder {
	return m.recorder
}

// consistentRead mocks base method
func (m *MockconsistentReader) consistentRead(filename string, retry int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "consistentRead", filename, retry)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// consistentRead indicates an expected call of consistentRead
func (mr *MockconsistentReaderMockRecorder) consistentRead(filename, retry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "consistentRead", reflect.TypeOf((*MockconsistentReader)(nil).consistentRead), filename, retry)
}

// MockfsCreator is a mock of fsCreator interface
type MockfsCreator struct {
	ctrl     *gomock.Controller
	recorder *MockfsCreatorMockRecorder
}

// MockfsCreatorMockRecorder is the mock recorder for MockfsCreator
type MockfsCreatorMockRecorder struct {
	mock *MockfsCreator
}

// NewMockfsCreator creates a new mock instance
func NewMockfsCreator(ctrl *gomock.Controller) *MockfsCreator {
	mock := &MockfsCreator{ctrl: ctrl}
	mock.recorder = &MockfsCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockfsCreator) EXPECT() *MockfsCreatorMockRecorder {
	return m.recorder
}

// format mocks base method
func (m *MockfsCreator) format(ctx context.Context, source, fsType string, opts ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, source, fsType}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "format", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// format indicates an expected call of format
func (mr *MockfsCreatorMockRecorder) format(ctx, source, fsType interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, source, fsType}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "format", reflect.TypeOf((*MockfsCreator)(nil).format), varargs...)
}

// MocktimeoutSemaphore is a mock of timeoutSemaphore interface
type MocktimeoutSemaphore struct {
	ctrl     *gomock.Controller
	recorder *MocktimeoutSemaphoreMockRecorder
}

// MocktimeoutSemaphoreMockRecorder is the mock recorder for MocktimeoutSemaphore
type MocktimeoutSemaphoreMockRecorder struct {
	mock *MocktimeoutSemaphore
}

// NewMocktimeoutSemaphore creates a new mock instance
func NewMocktimeoutSemaphore(ctrl *gomock.Controller) *MocktimeoutSemaphore {
	mock := &MocktimeoutSemaphore{ctrl: ctrl}
	mock.recorder = &MocktimeoutSemaphoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocktimeoutSemaphore) EXPECT() *MocktimeoutSemaphoreMockRecorder {
	return m.recorder
}

// Acquire mocks base method
func (m *MocktimeoutSemaphore) Acquire(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Acquire indicates an expected call of Acquire
func (mr *MocktimeoutSemaphoreMockRecorder) Acquire(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MocktimeoutSemaphore)(nil).Acquire), ctx)
}

// Release mocks base method
func (m *MocktimeoutSemaphore) Release(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release", ctx)
}

// Release indicates an expected call of Release
func (mr *MocktimeoutSemaphoreMockRecorder) Release(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MocktimeoutSemaphore)(nil).Release), ctx)
}

// MockpublishContextGetter is a mock of publishContextGetter interface
type MockpublishContextGetter struct {
	ctrl     *gomock.Controller
	recorder *MockpublishContextGetterMockRecorder
}

// MockpublishContextGetterMockRecorder is the mock recorder for MockpublishContextGetter
type MockpublishContextGetterMockRecorder struct {
	mock *MockpublishContextGetter
}

// NewMockpublishContextGetter creates a new mock instance
func NewMockpublishContextGetter(ctrl *gomock.Controller) *MockpublishContextGetter {
	mock := &MockpublishContextGetter{ctrl: ctrl}
	mock.recorder = &MockpublishContextGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockpublishContextGetter) EXPECT() *MockpublishContextGetterMockRecorder {
	return m.recorder
}

// GetPublishContext mocks base method
func (m *MockpublishContextGetter) GetPublishContext() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublishContext")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetPublishContext indicates an expected call of GetPublishContext
func (mr *MockpublishContextGetterMockRecorder) GetPublishContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishContext", reflect.TypeOf((*MockpublishContextGetter)(nil).GetPublishContext))
}

// MockvolumeCapabilityGetter is a mock of volumeCapabilityGetter interface
type MockvolumeCapabilityGetter struct {
	ctrl     *gomock.Controller
	recorder *MockvolumeCapabilityGetterMockRecorder
}

// MockvolumeCapabilityGetterMockRecorder is the mock recorder for MockvolumeCapabilityGetter
type MockvolumeCapabilityGetterMockRecorder struct {
	mock *MockvolumeCapabilityGetter
}

// NewMockvolumeCapabilityGetter creates a new mock instance
func NewMockvolumeCapabilityGetter(ctrl *gomock.Controller) *MockvolumeCapabilityGetter {
	mock := &MockvolumeCapabilityGetter{ctrl: ctrl}
	mock.recorder = &MockvolumeCapabilityGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockvolumeCapabilityGetter) EXPECT() *MockvolumeCapabilityGetterMockRecorder {
	return m.recorder
}

// GetVolumeCapability mocks base method
func (m *MockvolumeCapabilityGetter) GetVolumeCapability() *csi.VolumeCapability {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeCapability")
	ret0, _ := ret[0].(*csi.VolumeCapability)
	return ret0
}

// GetVolumeCapability indicates an expected call of GetVolumeCapability
func (mr *MockvolumeCapabilityGetterMockRecorder) GetVolumeCapability() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeCapability", reflect.TypeOf((*MockvolumeCapabilityGetter)(nil).GetVolumeCapability))
}

// MockvolToDevMapper is a mock of volToDevMapper interface
type MockvolToDevMapper struct {
	ctrl     *gomock.Controller
	recorder *MockvolToDevMapperMockRecorder
}

// MockvolToDevMapperMockRecorder is the mock recorder for MockvolToDevMapper
type MockvolToDevMapperMockRecorder struct {
	mock *MockvolToDevMapper
}

// NewMockvolToDevMapper creates a new mock instance
func NewMockvolToDevMapper(ctrl *gomock.Controller) *MockvolToDevMapper {
	mock := &MockvolToDevMapper{ctrl: ctrl}
	mock.recorder = &MockvolToDevMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockvolToDevMapper) EXPECT() *MockvolToDevMapperMockRecorder {
	return m.recorder
}

// CreateMapping mocks base method
func (m *MockvolToDevMapper) CreateMapping(volID, deviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapping", volID, deviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMapping indicates an expected call of CreateMapping
func (mr *MockvolToDevMapperMockRecorder) CreateMapping(volID, deviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapping", reflect.TypeOf((*MockvolToDevMapper)(nil).CreateMapping), volID, deviceName)
}

// GetMapping mocks base method
func (m *MockvolToDevMapper) GetMapping(volID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapping", volID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapping indicates an expected call of GetMapping
func (mr *MockvolToDevMapperMockRecorder) GetMapping(volID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapping", reflect.TypeOf((*MockvolToDevMapper)(nil).GetMapping), volID)
}

// DeleteMapping mocks base method
func (m *MockvolToDevMapper) DeleteMapping(volID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapping", volID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapping indicates an expected call of DeleteMapping
func (mr *MockvolToDevMapperMockRecorder) DeleteMapping(volID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapping", reflect.TypeOf((*MockvolToDevMapper)(nil).DeleteMapping), volID)
}
